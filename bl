#!/bin/sh
# TODO
# 	- Add Secure Boot support

if [ ! -d /sys/firmware/efi/ ]; then
	echo "System does not have UEFI"
	echo "Install an actual bootloader like GRUB"
	exit 1
fi

if command -v sudo >/dev/null 2>&1; then
	priv_escalator="sudo"
elif command -v doas >/dev/null 2>&1; then
	priv_escalator="doas"
else
	priv_escalator=""
	[ "$USER" = "root" ] || {
		echo "bootlicker needs to be run as root if sudo or doas are not available"
		exit 1
	}
fi

if [ -d "/boot" ]; then
	efi_mount_dir="/boot"
elif [ -d "/efi" ]; then
	efi_mount_dir="/efi"
else
	$priv_escalator mkdir -p /boot
	efi_mount_dir="/boot"
fi

efi_device_file="$(findmnt --output=SOURCE --noheadings $efi_mount_dir)"
efi_disk="$(echo "$efi_device_file" | awk -Fp '{print $1}')"
efi_part="$(echo "$efi_device_file" | awk -Fp '{print $2}')"

command -v efibootmgr >/dev/null || {
	if [ -e /lib/pacnostic.sh ]; then
		. /lib/pacnostic.sh
	else
		echo "install pacnostic"
	fi
	$PACNOSTIC_INSTALL efibootmgr || echo "efibootmgr required, but could not be found by package manager"
}

ucode=$(ls $efi_mount_dir/*-ucode.img >/dev/null 2>&1)

[ "$ucode" ] && ucode="initrd=\\$ucode"

case $1 in
	"info")
		efibootmgr --verbose
		;;
	"ls")
		case $2 in
			"all")
				efibootmgr --verbose | grep -v 'BootCurrent\|Timeout\|BootOrder'
				;;
			*)
				efibootmgr | grep -v 'BootCurrent\|Timeout\|BootOrder'
				;;
		esac
		;;
	"new"|"touch"|"open")
		distro=$(awk -F'=' '/^NAME/ {print $2}' /etc/os-release | sed 's|"||g')
		create_entry()
		{
			$priv_escalator efibootmgr \
				--verbose \
				--create \
				--disk "$efi_disk" --part "$efi_part" \
				--loader "/vmlinuz-$kernel" \
				--label "$distro - $kernel" \
				--unicode "root=PARTUUID=$(
							grep "$efi_device_file" -A1 |
							awk -F'=' '/UUID/{print $2}' |
							awk '{print $1}'
							) rw initrd=\\initramfs-$kernel.img $ucode"
		}
		case $2 in
			"all")
				for kernel in $(find /boot/vm* | awk -F'/' '{print $3}' | sed 's|vmlinuz-||'); do
					create_entry
				done
				;;
			*)
				kernel=$(ls /boot/vm* | awk -F'/' '{print $3}' | sed 's|vmlinuz-||' | fzf)
				create_entry
				;;
		esac
		;;
	"x"|"d"|"del"|"rm"|"remove"|"delete")
		case $2 in
			"")
				efibootmgr | grep -v 'Timeout\|BootCurrent\|BootOrder' | fzf | awk '{print $1}' | awk -Ft '{print $2}' | sed 's|*||'
				;;
			*)
				entry_to_delete=$(efibootmgr | grep "$2")
				[ "$entry_to_delete" ] || { echo "Entry to delete not found" && exit 1 ;}
				echo "Removing $entry_to_delete"
				$priv_escalator efibootmgr -b "$2" --verbose
				;;
		esac
		;;
	"up")
		;;
	*)
		echo "Usage: $0 <ls [all], new [all]>"
		;;
esac
